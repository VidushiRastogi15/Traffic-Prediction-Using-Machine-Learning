# TrafficPredictionUsingMachineLearning


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#importing the dataset
dataset = pd.read_csv("Dataset.csv")
from sklearn.preprocessing import LabelEncoder 
le = LabelEncoder() 
  
dataset['Date']= le.fit_transform(dataset['Date'])

X = dataset.iloc[:, 2:6].values
y = dataset.iloc[:, 6:7].values

#splitting into Train and Test data
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

#Featuring Scaling
from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.fit_transform(X_test)

#Fitting the Random Forest Regression
from sklearn.ensemble import RandomForestRegressor
regressor = RandomForestRegressor(n_estimators = 300, random_state = 0)
regressor.fit(X_train,y_train)

#fitting SVR to the dataset
from sklearn.svm import SVR
regressor = SVR(kernel = 'rbf')
regressor.fit(X_train,y_train)

#Predicting the Results
y_pred = regressor.predict(X_test)

if(y_pred.all()<2.5):
    y_pred=np.round(y_pred-0.5)
    
else:
    y_pred=np.round(y_pred+0.5)
    
#Calculating the error and accuracy of Random Forest Regression

df1=(y_pred-y_test)/y_test
df1=round(df1.mean()*100,2)
print("Error and Accuracy of Random Forest Regression:-  ")
print("Error = ",df1,"%") 
a=100-df1
print("Accuracy= ",a,"%")


#Calculating the error and accuracy of Support Vector Regression

df1=(y_pred-y_test)/y_test
df1=round(df1.mean()*100,2)
print("Error and Accuracy of Support Vector Regression:- " )
print("Error = ",df1,"%") 
a=100-df1
print("Accuracy= ",a,"%")

from sklearn.metrics import confusion_matrix

# assume y_pred and y_test are the ground truth and predicted labels, respectively
# y_pred and y_test should be 1D arrays or lists of the same length
cm = confusion_matrix(y_pred, y_test)

# calculate precision and recall
precision = cm[1,1] / (cm[0,1] + cm[1,1]) # true positives / (false positives + true positives)
recall = cm[1,1] / (cm[1,0] + cm[1,1]) # true positives / (false negatives + true positives)

# print precision and recall
print("Precision:", precision)
print("Recall:", recall)


